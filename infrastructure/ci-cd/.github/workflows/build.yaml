name: Build and Test

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'

jobs:
  lint:
    name: Lint Python code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, model-registry, model-runner, orchestration-service, data-access, monitoring-service]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          if [ -f services/${{ matrix.service }}/requirements.txt ]; then
            pip install -r services/${{ matrix.service }}/requirements.txt
          fi
      
      - name: Lint with flake8
        run: |
          flake8 services/${{ matrix.service }} --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 services/${{ matrix.service }} --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check formatting with black
        run: |
          black --check services/${{ matrix.service }}
      
      - name: Check imports with isort
        run: |
          isort --check-only --profile black services/${{ matrix.service }}
      
      - name: Type checking with mypy
        run: |
          mypy services/${{ matrix.service }}

  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: [api-gateway, model-registry, model-runner, orchestration-service, data-access, monitoring-service]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f services/${{ matrix.service }}/requirements.txt ]; then
            pip install -r services/${{ matrix.service }}/requirements.txt
          fi
      
      - name: Run tests with pytest
        run: |
          cd services/${{ matrix.service }}
          pytest --cov=app --cov-report=xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: services/${{ matrix.service }}/coverage.xml
          flags: unittests
          name: codecov-${{ matrix.service }}
          fail_ci_if_error: false

  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [api-gateway, model-registry, model-runner, orchestration-service, data-access, monitoring-service]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/mcp-${{ matrix.service }}:${{ github.sha }}
            ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && format('ghcr.io/{0}/mcp-{1}:latest', github.repository_owner, matrix.service) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max